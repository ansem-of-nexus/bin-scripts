#!/bin/bash
#
# script to automate configuring a youtube-dl execution
#
# default video quality
video_quality="'best[ext=mp4][height<=720]'"
# default video naming
name="[%(upload_date)s] %(title)s [%(uploader)s]"
# when combinding quality type, what filetype do you want
#    list of filetypes can be found in youtube-dl documentation
file_type="mkv"
# default audio quality
audio_quality="'bestaudio[ext!=webm]'"
# limits should be set in number and size sets (e.g. 1K, 1M, 1G)
playlist_rate="512K"
single_rate="1M"
# username, password is not set, to prompt entry each time
username=""
#
# DO NOT EDIT pass this line unless you know what you are doing
#
function help_screen () {
  echo "command [type] url [options]"
  echo "    -h for this screen"
  echo "types are:"
  echo "    -s for single"
  echo "    -l for list"
  echo "options are:"
  echo "    -p for path"
  echo "    -f set video/audio resolution/quality"
  echo "        ? to list possible video/audio options"
  echo "    -r limit download rate (e.g. 1K, 1M, 1G)"
  echo "        (\"l\" and \"s\" are presets for list or single)"
  echo "    -o open option adding. directly added to command"
  exit 0
  }
output="youtube-dl -i --abort-on-unavailable-fragment"
while getopts "hs:l:f:p:n:r:c:o:iu" opt; do
  case $opt in
    h)
      help_screen
      exit 0
      ;;
    s)
      declare -r link="${OPTARG}"
      output+=" --no-playlist"
      ;;
    l)
      declare -r link="${OPTARG}"
      output+=" --yes-playlist"
      ;;
    f)
      case "${OPTARG}" in
        \?)
          youtube-dl -F $link
          exit 0
          ;;
        m) declare -r quality="$audio_quality";;
        *) declare -r quality="${OPTARG}";;
      esac #case "${OPTARG}" in
      ;;
    p)
      case "${OPTARG}" in
        *\/) declare -r path="${OPTARG}" ;;
        *) declare -r path="${OPTARG}/" ;;
      esac #case "${OPTARG}" in
      ;;
    n) declare -r name="${OPTARG}" ;;
    r)
      case "${OPTARG}" in
        s) declare -r rate="$single_rate" ;;
        l) declare -r rate="$playlist_rate" ;;
        *) declare -r rate="${OPTARG}" ;;
      esac #case "${OPTARG}" in
      output+=" -r $rate"
      ;;
    c)
      if [ -d "${OPTARG}" ]; then
        while read l; do
          first="${OPTARG}${l}"
          second="${OPTARG}${l%.*}"
          second+=".flac"
          echo "ffmpeg -i ${first} -c:a flac ${second}"
          ffmpeg -i "${first}" -c:a flac "${second}"
          echo;sleep 1s
        done <<< "$(ls -1 "${OPTARG}")"
        exit 0
      else
        new="${OPTARG%.*}"
        new+=".flac"
        ffmpeg -i "${OPTARG}" -c:a flac "$new"
        exit 0
      fi
      ;;
    o) output+=" ${OPTARG}" ;;
    u) output+="$username" ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      help_screen
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      help_screen
      exit 1
      ;;
  esac
done #while getopts ":??" opt; do
if [ -z $link ]; then echo "link not provided with -s or -l" && exit 1; fi
if [ -z $quality ];then quality="$video_quality";fi
output+=" -f $quality"
if [ ! -z "${path}" ]; then output+=" -o \"${path}${name}.%(ext)s\""
else output+=" -o \"./${name}.%(ext)s\""; fi
output+=" $link"
# moving to printing and executing of command
echo $output
sleep 2s
eval "$output"
echo;echo "finished download [$?]";echo
#end of script
exit 0
