#!/bin/bash
step=1
wait=1
state_1=1
state_2=0
function help_screen () {
  echo "command [type] url [options]"
  echo "    -h for this screen"
  echo "types are:"
  echo "    -w watch interface"
  echo "    -r reset interface"
  echo "    -a show ip adress"
  echo "    -s sync date/time"
  echo ""
  exit 0
  }
  
function watch {
# log network conection and internet connection
  while true; do
    # starts output with time of execution
    o=$(date +%k:%M:%S)
    # checking any interfaces exist
    if [[ $(ls /sys/class/net/ | grep -v lo) != null ]]; then
      o+=" - Interface present"
      # checking provided interface for connection
      check_1="$(cat /sys/class/net/$interface/carrier)"
      case $check_1 in
          0)
            o+=" - disconnected"
            ;;
          1)
            o+=" - Connected"
            ;;
      esac # case $check_1 in
      if [ $check_1 = $state_1 ] && [ $check_1 != "0" ]; then
        echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1""
        check_2="$?"
        if [ ! $check_2 -eq $state_2 ]; then
          step=0
          wait=1
        fi #if [ ! $check_2 -eq $state_2 ]; then
        case $check_2 in
          0)
            o+=" - Internet"
            ;;
          1)
            o+=" - No Internet"
            ;;
          2)
            o+=" - No Connection"
            ;;
        esac #case $state_2 in
        # saving check_2 for next loop
        state_2=$check_2
      else #if [ $check_1 -eq $state_1 ] && [ ! $check_1 -eq 0 ]; then
        o+=" - Disconnected"
      fi #if [ $check_1 -eq $state_1 ] && [ ! $check_1 -eq 0 ]; then
      #saving check_1 for next loop
      state_1=$check_1
      #printing results
      echo $o
      interval
    else #if [[ $(ls /sys/class/net/ | grep -v lo) != null ]]; then
      o+=" - No Interfaces"
      read -p "Hit ENTER when interfaces are present" ; echo 
    fi #if [[ $(ls /sys/class/net/ | grep -v lo) != null ]]; then
  done
  #~ cat /sys/class/net/*device*/carrier 0=no-con 1=yes-con
  }

function reset {
  network="$(nmcli dev)"
  network="${network#*$interface}"
  network="${network%%[[:cntrl:]]*}"
  network="${network% *}"
  network="${network##*  }"
  echo "network:$network"
  nmcli con down "$network"
  sleep 10s
  result="starting"
  while [ ! $result = "0" ]; do
    step=0
    wait=5
    interval
    echo "atempting reconection"
    nmcli con up "$network"
    result=$?
  done
  }

function interval {
  ((step ++)) #iterating count
  case $wait in
    1) #seconds of sleep per step
      if [ "$step" = 60 ];then #check every second for a minute*
        wait=5
        step=1
      fi #if step
    ;;
    5) #seconds of sleep per step
      if [ "$step" = 60 ];then #check every 5 second for 5 minute*
        wait=30
        step=1
      fi #if step
    ;;
    #~ 30) #seconds of sleep per step
      #~ if [ "$step" = 8 ];then  #check every 30 seconds for 4 minute*
        #~ wait=60
        #~ step=1
      #~ fi #if step
    #~ ;;
    #* time inbetween waits is "time set" plus "execution time"
  esac
  read -t $wait -p "Hit ENTER or wait $wait seconds"; echo; echo
  #sleep "$wait"
  }

while getopts ":hw:r:as" opt; do
  case $opt in
    h)
      help_screen
      exit 0
      ;;
    w)
      declare -r interface="${OPTARG}"
      watch
      exit 0
      ;;
    r)
      declare -r interface="${OPTARG}"
      reset
      ;;
    a)
      #~ echo $(dig +short myip.opendns.com @resolver1.opendns.com)
      echo $(curl icanhazip.com)
      exit 0
      ;;
    s)
      ntpdate -q 0.fedora.pool.ntp.org
      exit 0
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      help_screen
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      help_screen
      exit 1
      ;;
  esac #case $opt in
done #while getopts "" opt; do

## notes
#~ $ date ; read -t 10 -p "Hit ENTER or wait ten seconds" ; echo ; date
#~ Tue Feb 28 22:29:15 WAST 2012
#~ Hit ENTER or wait ten seconds
#~ Tue Feb 28 22:29:25 WAST 2012
#~ wget -q --spider http://google.com
